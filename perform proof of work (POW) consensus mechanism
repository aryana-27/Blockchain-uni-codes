# prac 3

import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, transactions, difficulty, reward):
        self.index = index
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.timestamp = time.time()
        self.nonce = 0
        self.difficulty = difficulty
        self.reward = reward
        self.hash = self.mine_block()

    def compute_hash(self):
        block_data = f"{self.index}{self.previous_hash}{self.transactions}{self.timestamp}{self.nonce}"
        return hashlib.sha256(block_data.encode()).hexdigest()

    def mine_block(self):
        target = "0" * self.difficulty
        while True:
            self.hash = self.compute_hash()
            if self.hash.startswith(target):
                return self.hash
            self.nonce += 1

class Blockchain:
    def __init__(self, difficulty=4, initial_reward=50, halving_interval=5):
        self.chain = []
        self.difficulty = difficulty
        self.block_reward = initial_reward
        self.halving_interval = halving_interval
        self.create_genesis_block()

    def create_genesis_block(self):
        genesis_block = Block(0, "0", "Genesis Block", self.difficulty, self.block_reward)
        self.chain.append(genesis_block)

    def add_block(self, transactions):
        previous_block = self.chain[-1]
        new_block = Block(len(self.chain), previous_block.hash, transactions, self.difficulty, self.block_reward)
        self.chain.append(new_block)

        # Simulate reward halving
        if len(self.chain) % self.halving_interval == 0:
            self.block_reward /= 2

        self.adjust_difficulty()

    def adjust_difficulty(self):
        if len(self.chain) > 1:
            time_taken = self.chain[-1].timestamp - self.chain[-2].timestamp
            if time_taken > 5:  #
                self.difficulty -= 1 if self.difficulty > 1 else 0
            elif time_taken < 2:
                self.difficulty += 1

    def display_chain(self):
        for block in self.chain:
            print(f"Block {block.index}:")
            print(f"  Hash: {block.hash}")
            print(f"  Prev: {block.previous_hash}")
            print(f"  Transactions: {block.transactions}")
            print(f"  Nonce: {block.nonce}")
            print(f"  Reward: {block.reward}")
            print(f"  Difficulty: {block.difficulty}")
            print("-" * 50)

blockchain = Blockchain()

transactions_list = ["Aryana -> Anvesha: 5 BTC", "Kinjal -> Gaurang: 3 BTC"]

for _ in range(10):
    blockchain.add_block(transactions_list)

blockchain.display_chain()
