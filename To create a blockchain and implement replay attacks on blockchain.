#prac 2
import hashlib
import time

# Step 1: Define the Block class
class Block:
    def __init__(self, index, previous_hash, transactions, timestamp=None):
        self.index = index
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.timestamp = timestamp or time.time()
        self.nonce = 0
        self.hash = self.compute_hash()

    #The compute_hash method generates a unique hash for the block using its contents (index, previous hash, transactions, timestamp, and nonce).

    def compute_hash(self):
        block_string = f"{self.index}{self.previous_hash}{self.transactions}{self.timestamp}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

# Step 2: Define the Blockchain class

class Blockchain:
    def __init__(self):

      # chain contains all the blocks.
      # unconfirmed_transactions stores transactions waiting to be mined.

        self.chain = []
        self.unconfirmed_transactions = []
        self.create_genesis_block() # genesis block is the first block in blockchain

    def create_genesis_block(self): # genesis block is the first block in blockchain , The genesis block has an index of 0, no transactions, and a hardcoded previous hash "0".
        genesis_block = Block(0, "0", [], time.time())
        genesis_block.hash = genesis_block.compute_hash()
        self.chain.append(genesis_block)

    @property

    # New blocks reference the last blockâ€™s hash to maintain the chain.

    def last_block(self):
        return self.chain[-1] # Get the most recently added block in the

# Transactions are collected before being added to a block.
    def add_transaction(self, transaction):
        self.unconfirmed_transactions.append(transaction)

# mine_block creates and mines a new block if transactions are available.

# Mining ensures only valid blocks are added to the blockchain.


    def mine_block(self, difficulty=2):
        if not self.unconfirmed_transactions:
            return False # No transactions to mine.

        new_block = Block(
            index=len(self.chain),
            previous_hash=self.last_block.hash,
            transactions=self.unconfirmed_transactions,
        )

        proof = self.proof_of_work(new_block, difficulty) # Perform mining to find a valid hash.
        new_block.hash = proof # Update the block's hash with the mined hash
        self.chain.append(new_block)   # Add the mined block to the chain.
        self.unconfirmed_transactions = []
        return new_block

        # Proof-of-work ensures block validity. Only hashes with a specified number of leading
        # zeros are accepted.

    def proof_of_work(self, block, difficulty=2):
        block.nonce = 0. # Start with a nonce of 0.
        computed_hash = block.compute_hash()

        # The difficulty level in a blockchain is a measure of how hard it is to add new blocks to the chain.

        while not computed_hash.startswith("0" * difficulty):
            block.nonce += 1    # Increment nonce until a hash starting with 'difficulty' zeros is found.
            computed_hash = block.compute_hash()

        return computed_hash

# Step 3: Create a Blockchain instance
blockchain = Blockchain()
blockchain.add_transaction({"from": "Marty", "to": "Wendy", "amount": 50})
blockchain.mine_block()

# Display the blockchain before the replay attack
print("Before Replay Attack:")
for block in blockchain.chain:
    print(f"Block {block.index}: {block.transactions}")

# Step 4: Simulate a Replay Attack , Re-adds the same transaction.

replayed_transaction = blockchain.chain[1].transactions[0]  # Extract transaction from Block 1
blockchain.add_transaction(replayed_transaction)  # Re-add the same transaction
blockchain.mine_block()  # Mine a new block with the replayed transaction

# Extracts an existing transaction (replayed_transaction) and reuses it illegitimately.
# The blockchain mines a new block containing the replayed transaction.

# Display the blockchain after the replay attack
print("\nAfter Replay Attack:")
for block in blockchain.chain:
    print(f"Block {block.index}: {block.transactions}")

# Step 5: Countermeasures to prevent replay attacks
class SecureBlockchain(Blockchain):
    def add_transaction(self, transaction):
        # Prevent duplicate transactions
        for block in self.chain:
            if transaction in block.transactions:
                print("Replay attack detected! Transaction already exists.")
                return
        self.unconfirmed_transactions.append(transaction)

# Testing with a Secure Blockchain
secure_blockchain = SecureBlockchain()
secure_blockchain.add_transaction({"from": "Marty", "to": "Wendy", "amount": 50, "nonce": 12345})
secure_blockchain.mine_block()

print("\nTesting Secure Blockchain:")
replayed_transaction = secure_blockchain.chain[1].transactions[0]
secure_blockchain.add_transaction(replayed_transaction)  # Attempting replay attack
secure_blockchain.mine_block()
